default:
  image: node:16

stages:
  - install
  - test
  - build
  - deploy

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.npm-client:
  cache:
    - &node-modules-cache-client
      key:
        files:
          - client/package-lock.json
      paths:
        - client/node_modules/
      policy: pull
  before_script:
    - cd client
.npm-server:
  cache:
    - &node-modules-cache-server
      key:
        files:
          - server/package-lock.json
      paths:
        - server/node_modules/
      policy: pull
  before_script:
    - cd server

.install:
  stage: install
  script:
    - npm ci --cache .npm --prefer-offline
install-client:
  extends:
    - .npm-client
    - .install
  cache:
    - <<: *node-modules-cache-client
      policy: pull-push
    - key: $CI_JOB_NAME
      paths:
        - client/.npm/
install-server:
  extends:
    - .npm-server
    - .install
  cache:
    - <<: *node-modules-cache-server
      policy: pull-push
    - key: $CI_JOB_NAME
      paths:
        - server/.npm/

.format:
  stage: test
  script:
    - npm run format:check
format-client:
  extends:
    - .npm-client
    - .format
  needs: [install-client]
format-server:
  extends:
    - .npm-server
    - .format
  needs: [install-server]

.lint:
  stage: test
  script:
    - npm run lint
lint-client:
  extends:
    - .npm-client
    - .lint
  needs: [install-client]
lint-server:
  extends:
    - .npm-server
    - .lint
  needs: [install-server]

test-client:
  extends: .npm-client
  stage: test
  image: timbru31/node-chrome:16
  needs: [install-client]
  script:
    - npm test -- --no-watch --no-progress --browsers=ChromeHeadlessNoSandbox
test-server:
  extends: .npm-server
  stage: test
  needs: [install-server]
  script:
    - npm test

.docker:
  image: docker:20
  services:
    - docker:20-dind
  variables:
    CONTAINER_PRODUCTION_IMAGE: $CI_REGISTRY_IMAGE/$SUBPROJECT:production-$CI_COMMIT_SHA
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
.docker-client:
  extends: .docker
  variables:
    SUBPROJECT: client
.docker-server:
  extends: .docker
  variables:
    SUBPROJECT: server

.build:
  stage: build
  variables:
    CONTAINER_MR_IMAGE: $CI_REGISTRY_IMAGE/$SUBPROJECT:mr-$CI_MERGE_REQUEST_IID
  script:
    - docker build --pull -t $CONTAINER_BUILD_IMAGE -f $SUBPROJECT/Dockerfile .
    - docker push $CONTAINER_BUILD_IMAGE
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        CONTAINER_BUILD_IMAGE: $CONTAINER_MR_IMAGE
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        CONTAINER_BUILD_IMAGE: $CONTAINER_PRODUCTION_IMAGE
build-client:
  extends:
    - .docker-client
    - .build
  needs:
    - format-client
    - lint-client
    - test-client
build-server:
  extends:
    - .docker-server
    - .build
  needs:
    - format-server
    - lint-server
    - test-server

.deploy:
  stage: deploy
  variables:
    CONTAINER_DEPLOY_IMAGE: $CI_REGISTRY_IMAGE/$SUBPROJECT:latest
  script:
    - apk add --no-cache curl
    - docker pull $CONTAINER_PRODUCTION_IMAGE
    - docker tag $CONTAINER_PRODUCTION_IMAGE $CONTAINER_DEPLOY_IMAGE
    - docker push $CONTAINER_DEPLOY_IMAGE
    - curl --request POST $WEBHOOK_URL
  environment: production/$SUBPROJECT
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
deploy-client:
  extends:
    - .docker-client
    - .deploy
deploy-server:
  extends:
    - .docker-server
    - .deploy
