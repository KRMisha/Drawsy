default:
  image: node:16

stages:
  - install
  - test
  - build
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

.client:
  cache:
    - &client_node_modules_cache
      key:
        files:
          - client/package-lock.json
      paths:
        - client/node_modules/
      policy: pull
  before_script:
    - cd client
.server:
  cache:
    - &server_node_modules_cache
      key:
        files:
          - server/package-lock.json
      paths:
        - server/node_modules/
      policy: pull
  before_script:
    - cd server

install-client:
  extends: .client
  stage: install
  script:
    - npm ci --cache .npm --prefer-offline
  cache:
    - <<: *client_node_modules_cache
      policy: pull-push
    - key: $CI_JOB_NAME
      paths:
        - client/.npm/
install-server:
  extends: .server
  stage: install
  script:
    - npm ci --cache .npm --prefer-offline
  cache:
    - <<: *server_node_modules_cache
      policy: pull-push
    - key: $CI_JOB_NAME
      paths:
        - server/.npm/

.format:
  stage: test
  script:
    - npm run format:check
format-client:
  extends:
    - .client
    - .format
  needs: [install-client]
format-server:
  extends:
    - .server
    - .format
  needs: [install-server]

.lint:
  stage: test
  script:
    - npm run lint
lint-client:
  extends:
    - .client
    - .lint
  needs: [install-client]
lint-server:
  extends:
    - .server
    - .lint
  needs: [install-server]

test-client:
  extends:
    - .client
  stage: test
  image: timbru31/node-chrome:16
  needs: [install-client]
  script:
    - npm test -- --no-watch --no-progress --browsers=ChromeHeadlessNoSandbox
test-server:
  extends:
    - .server
  stage: test
  needs: [install-server]
  script:
    - npm test

# TODO: Make this generic if client also needs to build a Docker image
.docker-server:
  image: docker:20
  services:
    - docker:20-dind
  variables:
    CONTAINER_BUILD_IMAGE: $CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_SLUG
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/server:latest
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-client:
  # TODO: extends
  stage: build
  needs:
    - format-client
    - lint-client
    - test-client
  script:
    - echo TODO
    # TODO

build-server:
  extends: .docker-server
  stage: build
  needs:
    - format-server
    - lint-server
    - test-server
  script:
    - docker build --pull -t $CONTAINER_BUILD_IMAGE -f server/Dockerfile .
    - docker push $CONTAINER_BUILD_IMAGE

deploy-server:
  extends: .docker-server
  stage: deploy
  script:
    - docker pull $CONTAINER_BUILD_IMAGE
    - docker tag $CONTAINER_BUILD_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    # TODO: Figure out Azure
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  environment: production
